.. About this file
  - contains one (!) glossary entry in the ReSTructed format  
  - the glossary entry will be fetched by a `include` 
    directive of Sphinx.
  write 0 whitespaces in front of the label
  write 2 whitespaces infront of description.

.. _dylan-term-definition:

definition
------------


  Definitions are dylan language constructs:

..  _dylan-term-definition(language-construct-to-build-modularity):

  - to build up  
    :ref:`hierarchical modularity
    <dylan-term-hierarchical-modularity>`.

    - :samp:`define library`
    - :samp:`define module`

    These two definitions provides the dylan language to support
    :ref:`hierarchical modularity
    <dylan-term-hierarchical-modularity>`. 
    
    A  :ref:`library
    <dylan-term-library>`
    definition and its :ref:`modules
    <dylan-term-module>`
    must be written to a special module
    called *dylan-user*, which each implementation of the dylan
    language provides.
  
 ..  _dylam-term-definition(language-constructs-to-create-a-binding):
 
  - to create :ref:`bindings<dylan-term-binding>`

    A definiton which creates a binding must be a top-level language
    construct of a  
    :ref:`module
    <dylan-term-module>`. This means:
  
    - A binding creating definition can't be embedded into
      an other definitions.
    
    Such a definiton could represent  constant or variable
    :ref:`bindings
    <dylan-term-binding>` .

 ..  _dylam-term-definition(language-constructs-to-create-a-constant-binding):
  
    These definitions define and initializes a *constant* 
    binding in the current module
  
    - :samp:`define constant` ,    
    - :samp:`define class` ,
    - :samp:`define method` .

.. _dylan-term-definition(macro): 

    A special definition which create aconstant binding in the current module
    is :samp:`define macro`, which allows to 
    author a *domain specific language (DSL)*.


..  _dylam-term-definition(language-constructs-to-create-a-variable-binding):

    *Variable* bindings in the current module are created
    by those definitions:
    
    - :samp:`define variable` and
    - :samp:`define generic method`.
       
    The last  definition is essential for a mechanism called
    :ref:`method dispatch
    <dylan-term-generic-programming>`.
    It initializes a new :ref`generic function
    <dylan-term-generic-function>`. 

..  _dylan-term-defintion(links-to-details):
 
  Details for each definition are given in the related entries 
  in the `Dylan Reference Manaual (DRM)` or in the related glossary
  entry.
  
  - To define a :ref:`sealed
    <dylan-term-sealing>` 
    namespace and a :ref:`sealed
    <dylan-term-sealing>` namespace container:
    :ref:`module
    <dylan-term-module>`,
    :ref:`library
    <dylan-term-library>`.

  - To define classes with slots which bind to data or methods:
    :ref:`class
    <dylan-term-class>`,
    :ref:`slot
    <dylan-term-slot>`.
   
  - To execute code one can either use a method as basic unit 
    or build up a container of methods: 
    :ref:`method
    <dylan-term-method>`,
    :ref:`generic method
    <dylan-term-generic-method>`.
    
    When a *generic method* is called, it compares the arguments 
    it received with the parameter list of the methods it contains.
    It selects the most appropriate method and invokes it on the 
    arguments. This technique is called 
    :ref:`method dispatch
    <dylan-term-method-dispatch>`.
  

  - To specify what kind of :ref:`binding
    <dylan-term-binding>`
    a name provides to a value:
    :ref:`constant
    <dylan-term-binding(kind)>` 
    or 
    :ref:`variable
    <dylan-term-binding(kind)>`.


  - To define a *domain specific language*: 
    :ref:`macro
    <dylan-term-macro>`
    .
 
 
