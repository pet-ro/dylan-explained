.. About this file
  - contains one (!) glossary entry in the ReSTructed format  
  - the glossary entry will be fetched by a `include` 
    directive of Sphinx.
  write 0 whitespaces in front of the label
  write 2 whitespaces infront of description.

.. _dylan-term-compilation-unit:

compilation unit
----------------

  A programm typically gets splitted into fragements. 
  
  - separately compilable fragments are known as 
    :ref:`compilation unit
    <dylan-term-compilation-unit>`.  


  Which *granularity level* a programming language uses 
  as *compilation unit* depends on

  - its language specification.
  - its compiling process (interactive vs non-interactive)

.. _dylan-term-compilation-unit(dylan-granularity-level):

  The Dylan Reference Manual declares 

  -  a :ref:`library
     <dylan-term-library>`
     represent a *compilation unit* for non-interactive code. 

     All elements of a library build up the *compilation unit*:
     
     -  one :samp:`define library` unit and 
     -  one or more :samp:`define module` units 
     -  the :ref:`bindings
        <dylan-term-binding>`
        of each :ref:`module
        <dylan-term-module>`.

     Such a *compilation unit* can be represented its
     :ref:`modules
     <dylan-term-module>` by
     any number of :ref:`source records
     <dylan-term-source-record>`.


  - A compiler which is part of a  
    *integrate development environment (IDE)* 
    may support to compile small fragements than libraries. 
    (interactive code)
 
.. _dylan-term-compilation-unit(process): 
  
  In a compilation process a *compilation unit* is turned  
  into 
 
  - executable code (exe) or 
  - dynamically linkable code (dll).

  A compilation unit requires recompilation, if 
  
  - one of its :ref:`source records
    <dylan-term-source-record>` 
    or 
  
  - one of its used  *compilation units* have actually changed.
 
  
  
