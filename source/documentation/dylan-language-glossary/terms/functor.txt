.. About this file
  - contains one (!) glossary entry in the ReSTructed format  
  - the glossary entry will be fetched by a `include` 
    directive of Sphinx.
  write 0 whitespaces in front of the label
  write 2 whitespaces infront of description.

.. _dylan-term-functor:

functor
-------

  A functor is a *consturctor class* rather than a *type class*, 
  since its members are type constructors rather than base types.
  For a functor we can define a *map* function::

         Haskell terminology for a functor

               types of kind * -> *
 
       rather than

               type of kind * 

       where kinds classify types in the  dame way that types classify values.


  Even as it is a *constructor class* it is also a *type class* 
  with a specific functionality: a mapping::


      instance Functor List weher
         fmap = mapL

      fmap ( f o g) = fmap f o fmap g
      fmap id       = id

     

             

  Functors are the bridge between the two styles of *generic programming*:
 
  -  The bottom-up side of *generic programming*,  known as
     *Concept analysis*, is a way of looking for 
     :ref:`functors
     <dylan-term-functor>`
     that capture common structures.

  -  The top-down side of :ref:`
     generic programming
     <dylan-term-generic-programming>`, known as 
     *Datatype generic programming*, 

  -  *Datatype generic programming* emphasis 
      *regular datatypes* essentially described by 
      algebras generated by the :ref:`functors
      <dylan-term-functor>` 
      *sum*, *product* and *unit*. 

.. _dylan-term-functor(generic):

   Algorithms written for those functors can then operate on any 
   inductive datatype, and are thus inherently very *generic*. 

.. _dylan-term-functor(generic-algorithms):

   A fairly large class of *generic algorithms* can be defined in this 
   manner, such as 
  
   - structural equality, 
   - serialization/deserialization, 
   - zips, 
   - folds, and 
   - traversals.

   Many datatype-generic functions need access to the recursive positions
   in the structure of the datatype, there adopt a fixed point view on 
   datatypes. Examples include

   - variants of fold that traverse the data following the recursive structure
 
   - the Zipper data structure that enables navigation along the 
     recursive positions 
    
   - mamy real-life examples such as abstract syntax trees are in fact systems 
     of mutually recursive datatypes.

  
