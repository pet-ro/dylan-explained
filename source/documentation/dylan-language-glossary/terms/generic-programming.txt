.. About this file
  - contains one (!) glossary entry in the ReSTructed format  
  - the glossary entry will be fetched by a `include` 
    directive of Sphinx.
  write 0 whitespaces in front of the label
  write 2 whitespaces infront of description.

.. _dylan-term-generic-programming:

Generic programming
-------------------

  Two styles of *generic programming*:

  - :ref:`gradual lifting of concrete algorithms
    <dylan-term-generic-programming(gradual-lifting-of-concrete-algorithms)>` 
  - :ref:`datatype generic programming
    <dylan-term-generic-programming(datatype-generic-programming)>`

  In a sense, the opposition of styles is similar to that of 
  :ref:`bottom-up
  <dylan-term-bottom-up-development>` 
  versus 
  :ref:`top-down design
  <dylan-term-top-down-development>`. 


.. _dylan-term-generic-programming(gradual-lifting-of-concrete-algorithms):

  The *gradual lifting of concrete algorithms* school defines 
  the discipline of generic programming essentially as follows:
 
  - start with a practical, useful, algorithm and repeatedly abstract over 
    details; 
  - at any stage of the gradual abstraction, the *generic* version of the 
    algorithm shall be such that 

    - when instantiated it shall match the original algorithm 
      both in semantics and efficiency.

   This style of generic programming emphasizes *concept analysis*, the 
   process of finding and establishing the important classes of concepts 
   that enable many useful algorithms to work. 
   *Concept analysis* is a way of looking for functors that capture 
   common structures.

.. _dylan-term-generic-programming(datatype-generic-programming):

  Generic programming has its root in the initial algebra approach 
  to datatypes.  
  The style of *generic programming* that emphasis that 
  *structures of datatypes* are *parameters* of *generic programs*. 
  Therefore this style is called  *datatype generic programming*.

  *Datatype generic programming* has had a strong focus on 
    
   - *regular datatypes* essentially described by 
  
     - algebras generated by the functors *sum*, *product* and *unit*. 

   Algorithms written for those functors can then operate on any 
   inductive datatype, and are thus inherently very *generic*. 

   A fairly large class of *generic algorithms* can be defined in this 
   manner, such as 
  
   - structural equality, 
   - serialization/deserialization, 
   - zips, 
   - folds, and 
   - traversals.


  
