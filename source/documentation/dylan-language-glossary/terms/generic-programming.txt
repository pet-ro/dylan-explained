.. About this file
  - contains one (!) glossary entry in the ReSTructed format  
  - the glossary entry will be fetched by a `include` 
    directive of Sphinx.
  write 0 whitespaces in front of the label
  write 2 whitespaces infront of description.

.. _dylan-term-generic-programming:

Generic programming
-------------------

  Two styles of *generic programming*:

  - :ref:`gradual lifting of concrete algorithms
    <dylan-term-generic-programming(gradual-lifting-of-concrete-algorithms)>` 
  - :ref:`datatype generic programming
    <dylan-term-generic-programming(datatype-generic-programming)>`

  In a sense, the opposition of styles is similar to that of 
  :ref:`bottom-up
  <dylan-term-bottom-up-development>` 
  versus 
  :ref:`top-down design
  <dylan-term-top-down-development>`.

  The bottom-up side of generic programming is that it challenges programmers 
  - to find *generic* components,
  - strip them of irrelevant details and
  - write a generic function.
  
  The top-down side of generic programming is that it allows the programmer to
  abstract over the *structure* of a type by
  
  - developing functions that work for a range of types
  - solving a class of problems once for all or a group
    of :ref:`general instances
    <dylan-term-instance-terms>`,
    instead of writing new code for every single instance.
 
  The bottom-up side of generic programming is known as
  
  - **Concept analysis** .
 
    - *Concept analysis* is a way of looking for 
      :ref:`functors
      <dylan-term-functor>`
      that capture common structures.

  The top-down side of generic programming is knowns as

  - **Datatype generic programming**

    - *Datatype generic programming* emphasis that 
      *structures of types* are *parameters* 
      of *generic programs*.



.. _dylan-term-generic-programming(summary):

  To summarize, the generic programming methodology always consists 
  of the following steps: 
  
  - identify a family of useful and efficient concrete algorithms 
    with some commonality, 
  - resolve the differences by forming higher-level abstractions, and 
  - lift the concrete algorithms so they operate on these new abstractions. 
  - When applicable, there is a fourth step to implement 
    automatic selection of the best algorithm

  

.. _dylan-term-generic-programming(guide-to-subordinates):

.. _dylan-term-generic-programming(datatype-generic-programming):

   Related topics:

   -  A fairly large class of *generic algorithms* can be defined
   Algorithms written for those functors can then operate on any 
   inductive datatype, and are thus inherently very *generic*. 

   - The fairly large class of *generic algorithms* that can be defined 
     by the :ref:`functors
     <dylan-term-functor>` 
     *sum*, *product* and *unit*: see  :ref:`functors
     <dylan-term-functor>` 


  
