.. About this 
  contains one (!) glosssary entry. The content will be fetched 
  by a `include` directive of Sphinx to build up the glossary
  write 0 whitespaces in front of the label
  write 2 whitespaces in front of description.

.. _dylan-term-class:

class
-----


  :samp:`define class` introduces in the dylan language the :ref:`definition
  <dylan-term-definition>` 
  of *class*.  

.. _dylan-term-class(views):
  
  
  A better understanding 
  of the dylan language construct *class* provide
  these possible views on a *class* from different
  perspectives:

  - Related to the core concept :ref:`binding
    <dylan-term-binding>` 
    of the dylan language one  can describe a class as: 
    
    -  *grouping mechanism for* :term:`bindings 
       <dylan-term-binding>`
       . 

  - The way of thinking about a class in the dylan language 
    has its roots in the fields of 
    *Artificial Intelligence (AI)* and 
    *Knowledge Represenation (KR)*:
    
    - The concept of a *frame* in AI and KR is well resembled by the
      *class* concept of the dylan language:

      

      - What a `frame`  does in Knowledge Representation - 
        containing a set of 
        :ref:`named
        <dylan-term-name>` 
        :ref:`slots 
        <dylan-term-slot>`   - 
        does represent a *class* in the dylan language. 
    
  - The concept of :ref:`separation of concerns
    <dylan-term-separation-of-concerns>`:

    - The dylan language uses a class as grouping mechanism for bindings 
      only, and not as a construct to build up a :ref:`namespace
      <dylan-term-namespace>` 
      or a 
      :ref:`compilation unit
      <dylan-term-compilation-unit>`
      .  

  - The dylan language implements the 
    :ref:`object-oriented paradigma of programming
    <dylan-term-object-oriented paradigma-of-programming>`
    , 
    but its design is *centered around methods*, 
    not centered around *classes* as it is 
    done in the current mainstream object-oriented languages. 

.. _dylan-term-class(object-model):

  The :ref:`object model
  <dylan-term-object-model>` 
  often feels strange to newcomer to the dylan language from the 
  current mainstream object-oriented languages (C#, Java).
  
  - To build up a namespace around a class: 
   
    - in the dylan language you will define a :ref:`module
      <dylan-term-module>`  
      and nest the class inside the module.
  
  - To build up a :ref:`compilation unit
    <dylan-term-compilation-unit>` 
 
    - in the dylan language you will defines a :ref:`library
      <dylan-term-library>`, which groups together your :ref:`modules
      <dylan-term-module>`, which represent :ref:`namespaces
      <dylan-term-namespaces>`
      .
 
  - To initialise a class
   
    - in the dylan language you will :ref:`generic
      <dylan-term-generic>` 
      function :samp:`initialize`, which is outside of 
      the :samp:`define class` construct.

  - To create an instance creation of a class

    - in the dylan language you will use the :ref:`generic 
      <dylan-term-generic>` 
      function :samp:`make`. 


.. _dylan-term-class(slot):
  
  A *slot* of a class can either 
  
  - bind a *data* or 
  - bind a *method*, 

  as both are :ref:`first class objects
  <dylan-term-first-class-object>` 
  in the dylan language.

.. _dylan-term-class(slot-the-sole-class-construct):

  What is astonishing to newcomers to the dylan language
  is
  
  -  there exists only one construct, :ref:`slot
     <dylan-term-slot>`
     to build up the content of a class.
  
.. _dylam-term-class(guide-to-subordinates):

  Subordinated topics to a :ref:`class
  <dylan-term-class>`
  are:

  - the specification of :ref:`slots
    <dylan-term-slot>` of class.
    
  - the :ref:`instance creation
    <dylan-instance-creation>`
    of a class in case of a *abstract* or *concrete* class.
     
  - :ref:`class inheritance
    <dylan-term-class-inheritance>`, also known as 
    :ref:`subclassing
    <dylan-term-subclassing>`.
    
    - the dylan language supports a special form of :ref:`class inheritance
      <dylan-term-class-inheritance>`
     
      - :ref:`multi-inheritance
        <dylan-term-multi-inheritance>`.
 
