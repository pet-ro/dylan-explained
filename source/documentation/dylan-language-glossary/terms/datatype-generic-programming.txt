.. About this file
  - contains one (!) glossary entry in the ReSTructed format  
  - the glossary entry will be fetched by a `include` 
    directive of Sphinx.
  write 0 whitespaces in front of the label
  write 2 whitespaces infront of description.

.. _dylan-term-datatype-generic-programming:

Datatype-generic programming
---------------------------

  Datatype-generic programming enables abstraction
  by allowing the behaviour of functions to depend on type arguments.
  Such function are :ref:`generic functions
  <dylan-term-generic-function>`.

  *Datatype generic programming* has had a strong focus on 
    
   - *regular datatypes* essentially described by 
   
      - algebras generated by the :ref:`functors
        <dylan-term-functor>` 
        *constant*, *sum*, *product* and *unit* ( *identity* ). 

 

  - If a function is defined for all these cases, it can be applied to any
    regular recursive datatype of kind ::

       * -> *

     such as a list or a binary tree.                        

  A set of datatype declarations that refer to each other is not handled. 
  Such a system of (mutually recursive) datatypes are very useful in practice.
  For example, they are comonly used in compilers to model abstraxt syntax 
  trees, where each datatype declaration corresponds to a syntactic category 

  Such a limited generic function definition, which is 
  performing an induction on the structure of the type argument
  of the generic function, is called:
   
    -  *type-indexed definition of a gneric function   

  With an approach to define a generic function as

  - type-indexed valus that have kind-indexed types
 
  generic programming can be used on datatypes that have arbitrary kinds,
  and exhibi more complex forms of recursion (mutual and nested recursion).

  To summarize:

  - generic functions are sensitive to the way datatypes are modelled
    by the generic programming approach. Depending on the particular view 
    on datatypes used, a generic function can become easy or impossible
    to define. Because there are trade-offs involved in choosing one way to 
    model datatypes over another, it is desiravle to have support for
    different views on datatypes within a single generic programming approach.

