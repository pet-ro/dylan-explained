.. About this file
  - contains one (!) glossary entry in the ReSTructed format  
  - the glossary entry will be fetched by a `include` 
    directive of Sphinx.
  write 0 whitespaces in front of the label
  write 2 whitespaces infront of description.

.. _dylan-term-sealing:

sealing techniques
------------------

  Sealing techniques enable a range of compiler optimizations 
  and support security of software components.

.. _dylan-term-sealing(intro):


  The :ref:`sealing techniques
  <dylan-term-sealing>`
  of the dylan language are based on *three different aspects*.
 
  - first we introduce the three aspects via the *adjective pairs* 
    used in the dylan language
  - then we explain what each pair controls

.. _dylan-term-sealing(intro-adjective-pairs):


  Each  adjective pairs reflects a different sealing technique  

  - :ref:`sealed
    <dylan-term-sealed-constructs>`
    versus 
    *open* 
   
    - The adjective pair relates to the dylan language constructs:
      class, slot, generic function,  method. 
    
    -  Libraries and modules are sealed be default,
       but can export their content to be open for
       clients. 

    - The *adjective pair* reflects a sealing technique which 
      is based on whether a :ref:`compilation unit
      <dylan-term-compilation-unit>` is sealed.
      See :ref:`sealed language constructs
      <dylan-term-sealed-constructs>`

  - :ref:`abstract
    <dylan-term-class(abstract-concrete)>` 
    versus
    :ref:`concrete class
    <dylan-term-class(abstract-concrete)>`
    and
  - :ref:`instantiable
    <dylan-term-class(instantiable-uninstantiable)>`
    versus :ref:`uninstantiable class
    <dylan-term-class(instantiable-uninstantiable)>`

    - These two adjective pairs reflect sealing techniques which 
      are based on whether a :ref:`class
      <dylan-term-class>`
      can have direct 
      :ref:`instance creation
      <dylan-term-instance-creation>`.

      - Note: An abstract class can be instantiable. In this case the
        :ref:`constructor function
        <dylan-term-constructor-function-make>`
        *make* returns an instance of one of its subclasses.

  - :ref:`primary
    <dylan-term-primary-class>`
    or
    :ref:`free class
    <dylan-term-free-class>`

    - The adjective pair reflects a sealing technique which 
      is based on how a class can be used for multiple inheritance. 
   

      


   

